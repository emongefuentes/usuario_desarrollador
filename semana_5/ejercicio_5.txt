print("1. Cree un programa que itere e imprima los valores de dos listas del mismo tamaño al mismo tiempo.")
first_list = [
    "Hay",
    "en", 
    "que",
    "iteracion",
    'indices',
    "muy",
    ]   
second_list = [
    "casos", 
    "los", 
    'la', 
    "por", 
    "es", 
    "util",
    ]  


for index in range(0, len(first_list)):
    
    elemento_uno = first_list[index]
    elemento_dos = second_list[index] 
    
    print(f'{index} - {elemento_uno} {elemento_dos}')
    
    
print ("""
       2. Cree un programa que itere e imprima un string letra por letra de derecha a izquierda.
            a.Pista: investigue de que otras maneras se puede usar el `range`.
       """)

list_string = "Programacion"

for index in range(0, len(list_string)):
    char = list_string[index]
    print(char)   
    


print("3.Cree un programa que intercambie el primer y ultimo elemento de una lista. Debe funcionar con listas de cualquier tamaño.")

my_list = [
     "Pricipio",
     "del",
     "ejercicio",
     "numero",
     "tres",
     "Y",
     "final",
     ]
print(f"""
        Lista en orden:   {my_list}
        """)
        
primer_elemento = my_list.pop(0)
ultimo_elemento = my_list.pop(-1)
my_list.insert(0, ultimo_elemento)
my_list.append(primer_elemento)

print(f"""
     
Lista en intercambiada:   {my_list}
      """)

print("""
      
        Aqui pensé en que debia reemplazar el elemento 0 y 6, pero al hacerlo se borraban,
        entonces lo solucioné, guardando el elemento eliminado, y luego insertandolo en la lista en la posicion
        que yo elegia, tuve que investigar solamente como se accesa al elemento final de una lista
        y al parecer se usa un [-1 ultimo, -2 penultimo, -3 etc]
        """) 
 
 
print("4. Cree un programa que elimine todos los números impares de una lista.") 
        
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]

#aqui tuve muchas dudas, al final entendí que debia hacer una lista copia, porque si no
#los elementos borrados de la lista en cada salto, corrian las posiciones de la lista y afectaba el codigo.
my_list_copia = [] 

for numero in range(0, len(my_list)):
    elemento = my_list[numero]
    residuo = elemento % 2
    
    if residuo == 1:
        elemento_eliminado = my_list_copia.append(numero)
    
my_list = my_list_copia
print(my_list)    



print("""Cree un programa que le pida al usuario 10 números, 
      y al final le muestre todos los números que ingresó, 
      seguido del numero ingresado más alto.""")    


my_list = []
counter = 1
numero_mayor = 0
numero_menor = 0

while (counter < 11):
    numero = int(input(f"{counter}. Ingrese un numero: "))
    counter = counter + 1
    my_list.append(numero)       
      
my_list.sort(reverse=True) #para este ejercicio investigué si habia una funcion que permitiera ordenar el contenido de la lista.
print(my_list)


EJERCICIOS DICCIONARIO

1.Cree un diccionario que guarde la siguiente información sobre un hotel:
1.1. El key de habitaciones debe ser una lista, y cada habitación debe tener la siguiente información:
// Este ejercicio, entiendo que debo hacer esto, pero no me queda completamente claro si cumplí con el objetivo.

diccionario_hotel = { "nombre" : "El Coyote",
                     "Puntuacion" : "6 estrellas",
                     
                     "diccionario_habitaciones" : [  "1", "1", "10",
                                                      "2", "2", "20",
                                                     "3", "3", "30"]
                        
} 

print(diccionario_hotel)

"""Cree un programa que cree un diccionario
usando dos listas del mismo tamaño, usando
una para sus keys, y la otra para sus values."""

dict_a = {}

list_a=['first_name','last_name','role']
list_b=['Edgar','Monge','Student S.E']

dict_a [list_a[0]] = list_b[0]
dict_a [list_a[1]] = list_b[1]
dict_a [list_a[2]] = list_b[2]

print(dict_a)


"""Cree un programa que use una lista 
para eliminar keys de un diccionario."""

list_of_keys = ['access_level', 'age']

employe = {'name' : 'edgar', "email" : "emonge@yahoo.com", 'access_level' : 5, 'age' : 28}

print(employe)

delete_item = employe.pop(list_of_keys[0])
delete_item = employe.pop(list_of_keys[1])

print(employe)